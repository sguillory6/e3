{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Cluster of worker machines used to execute load against a target",

  "Parameters" : {
    "CidrBlock" : {
      "Description" : "The IP address range that is permitted to access the instance",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "ClusterSize" : {
      "Description" : "The number of ec2 instances to spin up as part of this cluster config",
      "Type": "Number",
      "Default" : "4",
      "MinValue" : "1",
      "ConstraintDescription" : "must be a positive integer"
    },
    "CollectdConfigUrl" : {
      "Description" : "Url to download collectd config from",
      "Type" : "String",
      "Default" : "",
      "ConstraintDescription" : "must be a valid url pointing to a valid collectd.conf"
    },
    "EbsOptimized" : {
      "Description" : "Enable EBS Optimizations",
      "Type" : "String",
      "Default" : "true",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be 'true' or 'false'."
    },
    "HomeIops" : {
      "Description" : "Home directory IOPS (100 - 20000, only used with Provisioned IOPS).  Note: The ratio of IOPS provisioned to the volume size requested can be a maximum of 30; for example, a volume with 3000 IOPS must be at least 100 GiB",
      "Type" : "Number",
      "Default" : "300",
      "MinValue" : "100",
      "MaxValue" : "20000",
      "ConstraintDescription" : "must be in the range 100 - 20000."
    },
    "HomeSize" : {
      "Description" : "Home directory storage size, in gibibytes (GiB) (100 - 16384)",
      "Type" : "Number",
      "Default" : "100",
      "MinValue" : "100",
      "MaxValue" : "16384",
      "ConstraintDescription" : "must be in the range 100 - 16384."
    },
    "HomeVolumeType" : {
      "Description" : "Home directory volume type",
      "Type" : "String",
      "Default" : "Provisioned IOPS",
      "AllowedValues" : [ "General Purpose (SSD)", "Provisioned IOPS" ],
      "ConstraintDescription" : "must be 'General Purpose (SSD)' or 'Provisioned IOPS'."
    },
    "InstanceType" : {
      "Description" : "EC2 Instance type",
      "Type" : "String",
      "Default" : "c3.xlarge",
      "AllowedValues" : [
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge",
        "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type, 'large' or larger."
    },
    "KeyName" : {
      "Description" : "(REQUIRED) The EC2 Key Pair to allow SSH access to the instance",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "Subnets" : {
      "Description" : "(REQUIRED) Subnets within the selected VPC",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "ConstraintDescription": "Must be a list of Subnet ID's within the selected VPC."
    },
    "VPC" : {
      "Description" : "(REQUIRED) Virtual Private Cloud",
      "Type" : "AWS::EC2::VPC::Id",
      "ConstraintDescription" : "must be the ID of a VPC."
    }
  },

  "Conditions" : {
    "IsEbsOptimized" : { "Fn::Equals" : [ { "Ref" : "EbsOptimized" }, "true" ] },
    "IsProvisionedIops" : { "Fn::Equals" : [ { "Ref" : "HomeVolumeType" }, "Provisioned IOPS" ] }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "cn-north-1"     : { "HVM64" : "ami-43a36a2e" },
      "ap-northeast-1" : { "HVM64" : "ami-383c1956" },
      "ap-southeast-1" : { "HVM64" : "ami-c9b572aa" },
      "ap-southeast-2" : { "HVM64" : "ami-48d38c2b" },
      "eu-central-1"   : { "HVM64" : "ami-bc5b48d0" },
      "eu-west-1"      : { "HVM64" : "ami-bff32ccc" },
      "sa-east-1"      : { "HVM64" : "ami-6817af04" },
      "us-east-1"      : { "HVM64" : "ami-60b6c60a" },
      "us-west-1"      : { "HVM64" : "ami-d5ea86b5" },
      "us-west-2"      : { "HVM64" : "ami-f0091d91" }
    }
  },

  "Resources" : {
    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security group allowing SSH and HTTP/HTTPS access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "64.170.41.0/24"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "208.8.57.0/25"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "192.168.0.0/16"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "10.0.0.0/8"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "172.16.0.0/12"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "CidrBlock" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "6373",
            "ToPort" : "6373",
            "CidrIp" : { "Ref" : "CidrBlock" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "6372",
            "ToPort" : "6372",
            "CidrIp" : { "Ref" : "CidrBlock" }
          }
        ]
      }
    },

    "ClusterNodeGroup" : {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "DesiredCapacity": {"Ref" : "ClusterSize"},
        "HealthCheckGracePeriod": 7200,
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": { "Ref": "WorkerNodeLaunchConfig" },
        "MaxSize": {"Ref" : "ClusterSize"},
        "MinSize": {"Ref" : "ClusterSize"},
        "VPCZoneIdentifier": { "Ref": "Subnets" }
      }
    },

    "WorkerNodeLaunchConfig" : {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "",
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "default" : [ "1"]
          },
          "1" : {
            "packages" : {
              "yum" : {
                "collectd" : [],
                "git" : []
              }
            },
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : [ "", [
                    "[main]\n",
                    "stack=", { "Ref" : "AWS::StackId" }, "\n",
                    "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/collectd.conf": {
                  "content": {
                    "Fn::Join": [
                      "",
                      [
                        "Hostname    \"localhost\"\n",
                        "FQDNLookup   true\n",
                        "BaseDir     \"/var/lib/collectd\"\n",
                        "PIDFile     \"/var/run/collectd.pid\"\n",
                        "PluginDir   \"/usr/lib64/collectd\"\n",
                        "TypesDB     \"/usr/share/collectd/types.db\"\n",
                        "Interval     10\n",
                        "Timeout      2\n",
                        "ReadThreads  5\n",
                        "WriteThreads 5\n",
                        "LoadPlugin logfile\n",
                        "<Plugin \"logfile\">\n",
                        "  LogLevel \"info\"\n",
                        "  File \"/var/log/collectd.log\"\n",
                        "  Timestamp true\n",
                        "</Plugin>\n",
                        "LoadPlugin cpu\n",
                        "LoadPlugin csv\n",
                        "LoadPlugin interface\n",
                        "LoadPlugin df\n",
                        "LoadPlugin disk\n",
                        "LoadPlugin processes\n",
                        "LoadPlugin load\n",
                        "LoadPlugin memory\n",
                        "LoadPlugin swap\n",
                        "LoadPlugin aggregation\n",
                        "<Plugin aggregation>\n",
                        "  <Aggregation>\n",
                        "    Plugin \"cpu\"\n",
                        "    Type \"cpu\"\n",
                        "    GroupBy \"Host\"\n",
                        "    GroupBy \"TypeInstance\"\n",
                        "    CalculateSum true\n",
                        "    CalculateAverage true\n",
                        "  </Aggregation>\n",
                        "</Plugin>\n",
                        "<Plugin csv>\n",
                        "	DataDir \"/var/lib/collectd/csv\"\n",
                        "	StoreRates false\n",
                        "</Plugin>\n",
                        "<Plugin df>\n",
                        "	Device \"/dev/xvda1\"\n",
                        "	MountPoint \"/media/atl\"\n",
                        "	IgnoreSelected false\n",
                        "	ReportByDevice false\n",
                        "	ReportReserved false\n",
                        "	ReportInodes false\n",
                        "	ValuesAbsolute true\n",
                        "	ValuesPercentage false\n",
                        "</Plugin>\n",
                        "<Plugin disk>\n",
                        "	Disk \"/^[hs]d[a-f][0-9]?$/\"\n",
                        "	IgnoreSelected false\n",
                        "</Plugin>\n",
                        "<Plugin interface>\n",
                        "	Interface \"eth0\"\n",
                        "	IgnoreSelected false\n",
                        "</Plugin>\n",
                        "<Plugin processes>\n",
                        "	Process \"git\"\n",
                        "	Process \"java\"\n",
                        "</Plugin>\n",
                        "<Plugin \"swap\">\n",
                        "	ReportByDevice false\n",
                        "	ReportBytes true\n",
                        "</Plugin>\n",
                        "Include \"/etc/collectd.d\"\n"
                      ]
                    ]
                },
                "mode": "000600",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : [ "", [
                    "[cfn-auto-reloader-hook]\n",
                    "triggers=post.update\n",
                    "path=Resources.WorkerNodeLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                    "action=/opt/aws/bin/cfn-init ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource WorkerNodeLaunchConfig ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    "runas=root\n"
                ]]}
              }
            },
            "commands" : {
              "010_format_data_volume" : {
                "command" : "mkfs -t ext4 /dev/xvdf",
                "ignoreErrors" : "false"
              },
              "020_make_shared_home_dir" : {
                "command" : "mkdir -p /media/data",
                "ignoreErrors" : "false"
              },
              "030_mount_all" : {
                "command" : "mount /dev/xvdf /media/data",
                "ignoreErrors" : "false"
              },
              "040_chown_data_dir" : {
                "command" : "chown -R ec2-user:ec2-user /media/data",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                  "files" : [ "/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf" ]
                },
                "collectd" : { "enabled" : "true", "ensureRunning" : "true", "packages" : { "yum" : [ "collectd" ] } }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress" : true,
        "ImageId": {
          "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" },
            { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ]
        },
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "BlockDeviceMappings" : [{
          "DeviceName" : "/dev/xvdf",
          "Ebs" : {
            "VolumeType" : { "Fn::If" : [ "IsProvisionedIops", "io1", "gp2" ] },
            "Iops" : { "Fn::If" : [ "IsProvisionedIops", { "Ref" : "HomeIops" }, { "Ref" : "AWS::NoValue" } ] },
            "DeleteOnTermination" : "true",
            "VolumeSize" : { "Ref" : "HomeSize" }
          }}],
         "KeyName": { "Ref": "KeyName" },
          "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WorkerNodeLaunchConfig ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource ClusterNodeGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    }
  },
  "Outputs" : {
    "AutoScalingGroupName" : {
      "Description" : "The name of this auto scaling group",
      "Value" : { "Ref": "ClusterNodeGroup" }
    }
  }
}
